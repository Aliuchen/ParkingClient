package com.example.parking.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.parking.db.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, String.class, "OrderId", false, "ORDER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Location = new Property(3, String.class, "location", false, "LOCATION");
        public final static Property StartReserveTime = new Property(4, String.class, "startReserveTime", false, "START_RESERVE_TIME");
        public final static Property StartParkTime = new Property(5, String.class, "startParkTime", false, "START_PARK_TIME");
        public final static Property EndTime = new Property(6, String.class, "endTime", false, "END_TIME");
        public final static Property ParkTag = new Property(7, int.class, "parkTag", false, "PARK_TAG");
        public final static Property PayTag = new Property(8, int.class, "payTag", false, "PAY_TAG");
        public final static Property Consume = new Property(9, double.class, "consume", false, "CONSUME");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_ID\" TEXT NOT NULL UNIQUE ," + // 1: OrderId
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"LOCATION\" TEXT," + // 3: location
                "\"START_RESERVE_TIME\" TEXT," + // 4: startReserveTime
                "\"START_PARK_TIME\" TEXT," + // 5: startParkTime
                "\"END_TIME\" TEXT," + // 6: endTime
                "\"PARK_TAG\" INTEGER NOT NULL ," + // 7: parkTag
                "\"PAY_TAG\" INTEGER NOT NULL ," + // 8: payTag
                "\"CONSUME\" REAL NOT NULL );"); // 9: consume
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String startReserveTime = entity.getStartReserveTime();
        if (startReserveTime != null) {
            stmt.bindString(5, startReserveTime);
        }
 
        String startParkTime = entity.getStartParkTime();
        if (startParkTime != null) {
            stmt.bindString(6, startParkTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(7, endTime);
        }
        stmt.bindLong(8, entity.getParkTag());
        stmt.bindLong(9, entity.getPayTag());
        stmt.bindDouble(10, entity.getConsume());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderId());
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(4, location);
        }
 
        String startReserveTime = entity.getStartReserveTime();
        if (startReserveTime != null) {
            stmt.bindString(5, startReserveTime);
        }
 
        String startParkTime = entity.getStartParkTime();
        if (startParkTime != null) {
            stmt.bindString(6, startParkTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(7, endTime);
        }
        stmt.bindLong(8, entity.getParkTag());
        stmt.bindLong(9, entity.getPayTag());
        stmt.bindDouble(10, entity.getConsume());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // OrderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // location
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // startReserveTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // startParkTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // endTime
            cursor.getInt(offset + 7), // parkTag
            cursor.getInt(offset + 8), // payTag
            cursor.getDouble(offset + 9) // consume
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderId(cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLocation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStartReserveTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStartParkTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setParkTag(cursor.getInt(offset + 7));
        entity.setPayTag(cursor.getInt(offset + 8));
        entity.setConsume(cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
